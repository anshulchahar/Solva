{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"DocAnalyze Documentation","text":"<p>Welcome to the official documentation for DocAnalyze, a document analysis application that leverages AI to extract, process, and analyze information from PDF documents.</p>"},{"location":"#overview","title":"Overview","text":"<p>DocAnalyze combines the power of PDF processing libraries with Google's Gemini API to provide intelligent document analysis. The application is built with Flask and provides both a web interface and API endpoints for document processing.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>PDF Text Extraction: Extract text content from PDF documents</li> <li>AI-Powered Analysis: Process document content using Google's Gemini API</li> <li>Web Interface: User-friendly interface for uploading and analyzing documents</li> <li>API Access: Programmatic access for integration with other systems</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>To start using DocAnalyze, see the Getting Started guide.</p>"},{"location":"#license","title":"License","text":"<p>DocAnalyze is released under the license included in the repository.</p>"},{"location":"#source-code","title":"Source Code","text":"<p>The source code is available on GitHub.</p>"},{"location":"about/changelog/","title":"Changelog","text":"<p>All notable changes to DocAnalyze will be documented in this file.</p>"},{"location":"about/changelog/#unreleased","title":"[Unreleased]","text":""},{"location":"about/changelog/#added","title":"Added","text":"<ul> <li>Initial project structure</li> <li>PDF text extraction using PyPDF</li> <li>Document analysis with Google Gemini API</li> <li>Web interface with Flask</li> <li>API endpoints for document processing</li> <li>Documentation site with MkDocs</li> </ul>"},{"location":"about/changelog/#010-yyyy-mm-dd","title":"[0.1.0] - YYYY-MM-DD","text":""},{"location":"about/changelog/#added_1","title":"Added","text":"<ul> <li>Initial release</li> <li>Basic PDF text extraction</li> <li>Integration with Google Gemini API</li> <li>Simple web interface for document uploads</li> </ul>"},{"location":"about/license/","title":"License","text":"<p>DocAnalyze is released under the MIT License.</p>"},{"location":"about/license/#mit-license","title":"MIT License","text":"<p>Copyright \u00a9 2023 DocAnalyze Contributors</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"api-reference/app-routes/","title":"Application Routes Reference","text":"<p>This page documents the Flask application routes and API endpoints available in DocAnalyze.</p>"},{"location":"api-reference/app-routes/#web-interface-routes","title":"Web Interface Routes","text":""},{"location":"api-reference/app-routes/#get","title":"<code>GET /</code>","text":"<p>The main application route that renders the home page.</p> <p>Response: HTML page with the document upload form.</p>"},{"location":"api-reference/app-routes/#get-about","title":"<code>GET /about</code>","text":"<p>About page with information about the application.</p> <p>Response: HTML page with application information.</p>"},{"location":"api-reference/app-routes/#api-endpoints","title":"API Endpoints","text":""},{"location":"api-reference/app-routes/#post-apiupload","title":"<code>POST /api/upload</code>","text":"<p>Endpoint for uploading PDF documents.</p> <p>Request: - Content-Type: <code>multipart/form-data</code> - Body: Form data with <code>file</code> field containing the PDF document</p> <p>Response: <pre><code>{\n  \"success\": true,\n  \"file_id\": \"unique-file-identifier\",\n  \"message\": \"File uploaded successfully\"\n}\n</code></pre></p>"},{"location":"api-reference/app-routes/#post-apianalyzefile_id","title":"<code>POST /api/analyze/{file_id}</code>","text":"<p>Endpoint for analyzing a previously uploaded document.</p> <p>URL Parameters: - <code>file_id</code>: Unique identifier returned from the upload endpoint</p> <p>Request: - Content-Type: <code>application/json</code> - Body: <pre><code>{\n  \"analysis_type\": \"general\",\n  \"options\": {\n    \"extract_images\": false,\n    \"ocr\": false\n  }\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"success\": true,\n  \"analysis\": {\n    \"summary\": \"Document summary...\",\n    \"entities\": [\"Entity1\", \"Entity2\"],\n    \"metadata\": {\n      \"title\": \"Document Title\",\n      \"author\": \"Author Name\",\n      \"page_count\": 10\n    }\n  }\n}\n</code></pre></p>"},{"location":"api-reference/app-routes/#post-apiquestionfile_id","title":"<code>POST /api/question/{file_id}</code>","text":"<p>Endpoint for asking questions about a document.</p> <p>URL Parameters: - <code>file_id</code>: Unique identifier returned from the upload endpoint</p> <p>Request: - Content-Type: <code>application/json</code> - Body: <pre><code>{\n  \"question\": \"What is the main topic of this document?\"\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"success\": true,\n  \"answer\": \"The main topic of this document is...\"\n}\n</code></pre></p>"},{"location":"api-reference/app-routes/#get-apidocuments","title":"<code>GET /api/documents</code>","text":"<p>Endpoint for retrieving a list of previously uploaded documents.</p> <p>Response: <pre><code>{\n  \"success\": true,\n  \"documents\": [\n    {\n      \"file_id\": \"unique-file-identifier-1\",\n      \"filename\": \"document1.pdf\",\n      \"upload_time\": \"2023-06-01T12:34:56\",\n      \"size\": 1024000,\n      \"analysis_status\": \"completed\"\n    },\n    {\n      \"file_id\": \"unique-file-identifier-2\",\n      \"filename\": \"document2.pdf\",\n      \"upload_time\": \"2023-06-02T10:11:12\",\n      \"size\": 2048000,\n      \"analysis_status\": \"pending\"\n    }\n  ]\n}\n</code></pre></p>"},{"location":"api-reference/app-routes/#error-handling","title":"Error Handling","text":"<p>All API endpoints return appropriate HTTP status codes:</p> <ul> <li><code>200 OK</code>: Request successful</li> <li><code>400 Bad Request</code>: Invalid request parameters</li> <li><code>404 Not Found</code>: Resource not found</li> <li><code>415 Unsupported Media Type</code>: Unsupported file format</li> <li><code>500 Internal Server Error</code>: Server-side error</li> </ul> <p>Error responses include a JSON object with error details:</p> <pre><code>{\n  \"success\": false,\n  \"error\": \"Error message\",\n  \"code\": \"ERROR_CODE\"\n}\n</code></pre>"},{"location":"api-reference/gemini-api/","title":"Gemini API Integration Reference","text":"<p>This page documents the Google Gemini API integration in DocAnalyze.</p>"},{"location":"api-reference/gemini-api/#gemini-api-handler-module","title":"Gemini API Handler Module","text":"<p>The <code>gemini_api_handler.py</code> module provides functions for interacting with Google's Gemini API to analyze document content.</p>"},{"location":"api-reference/gemini-api/#analyze_texttext-analysis_typegeneral","title":"<code>analyze_text(text, analysis_type=\"general\")</code>","text":"<p>Analyzes text content using the Gemini API.</p> <p>Parameters:</p> <ul> <li><code>text</code> (str): Text content to analyze</li> <li><code>analysis_type</code> (str, optional): Type of analysis to perform. Options include:</li> <li><code>\"general\"</code>: General purpose analysis (default)</li> <li><code>\"summary\"</code>: Text summarization</li> <li><code>\"entities\"</code>: Named entity recognition</li> <li><code>\"sentiment\"</code>: Sentiment analysis</li> </ul> <p>Returns:</p> <ul> <li><code>dict</code>: Analysis results with structure varying by analysis type</li> </ul> <p>Example:</p> <pre><code>from gemini_api_handler import analyze_text\n\ntext = \"Your document text here...\"\nanalysis = analyze_text(text, analysis_type=\"summary\")\nprint(f\"Summary: {analysis['summary']}\")\n</code></pre>"},{"location":"api-reference/gemini-api/#ask_questiontext-question","title":"<code>ask_question(text, question)</code>","text":"<p>Asks a specific question about the document content.</p> <p>Parameters:</p> <ul> <li><code>text</code> (str): Document text content</li> <li><code>question</code> (str): Question to ask about the document</li> </ul> <p>Returns:</p> <ul> <li><code>str</code>: Answer to the question</li> </ul> <p>Example:</p> <pre><code>from gemini_api_handler import ask_question\n\ntext = \"Your document text here...\"\nquestion = \"What is the main topic of this document?\"\nanswer = ask_question(text, question)\nprint(f\"Q: {question}\")\nprint(f\"A: {answer}\")\n</code></pre>"},{"location":"api-reference/gemini-api/#batch_analyzedocuments-analysis_typegeneral","title":"<code>batch_analyze(documents, analysis_type=\"general\")</code>","text":"<p>Analyzes multiple documents in batch.</p> <p>Parameters:</p> <ul> <li><code>documents</code> (list): List of document text strings</li> <li><code>analysis_type</code> (str, optional): Type of analysis to perform</li> </ul> <p>Returns:</p> <ul> <li><code>list</code>: List of analysis results corresponding to each document</li> </ul> <p>Example:</p> <pre><code>from gemini_api_handler import batch_analyze\nfrom pdf_processor import extract_text\nimport os\n\n# Extract text from multiple documents\ndocuments = []\nfor filename in os.listdir(\"docs\"):\n    if filename.endswith(\".pdf\"):\n        text = extract_text(f\"docs/{filename}\")\n        documents.append(text)\n\n# Analyze all documents\nresults = batch_analyze(documents, analysis_type=\"summary\")\n\n# Process results\nfor i, result in enumerate(results):\n    print(f\"Document {i+1} Summary: {result['summary']}\")\n</code></pre>"},{"location":"api-reference/gemini-api/#configuration","title":"Configuration","text":"<p>The Gemini API integration requires an API key to be configured. This can be set:</p> <ol> <li> <p>In a <code>.env</code> file in the project root directory:    <pre><code>GEMINI_API_KEY=your_api_key_here\n</code></pre></p> </li> <li> <p>As an environment variable:    <pre><code>export GEMINI_API_KEY=your_api_key_here\n</code></pre></p> </li> <li> <p>Programmatically:    <pre><code>import os\nos.environ[\"GEMINI_API_KEY\"] = \"your_api_key_here\"\n</code></pre></p> </li> </ol>"},{"location":"api-reference/pdf-processor/","title":"PDF Processor API Reference","text":"<p>This page documents the PDF processing functionality available in DocAnalyze.</p>"},{"location":"api-reference/pdf-processor/#pdf-processor-module","title":"PDF Processor Module","text":"<p>The <code>pdf_processor.py</code> module provides functions for extracting and processing text from PDF documents.</p>"},{"location":"api-reference/pdf-processor/#extract_textfile_path","title":"<code>extract_text(file_path)</code>","text":"<p>Extracts text content from a PDF file.</p> <p>Parameters:</p> <ul> <li><code>file_path</code> (str): Path to the PDF file</li> </ul> <p>Returns:</p> <ul> <li><code>str</code>: Extracted text content from the PDF</li> </ul> <p>Example:</p> <pre><code>from pdf_processor import extract_text\n\ntext = extract_text(\"path/to/document.pdf\")\nprint(text)\n</code></pre>"},{"location":"api-reference/pdf-processor/#extract_metadatafile_path","title":"<code>extract_metadata(file_path)</code>","text":"<p>Extracts metadata from a PDF file.</p> <p>Parameters:</p> <ul> <li><code>file_path</code> (str): Path to the PDF file</li> </ul> <p>Returns:</p> <ul> <li><code>dict</code>: Dictionary containing metadata such as:</li> <li><code>title</code>: Document title</li> <li><code>author</code>: Author name</li> <li><code>creator</code>: Creator application</li> <li><code>producer</code>: Producer application</li> <li><code>creation_date</code>: Date when the document was created</li> <li><code>modification_date</code>: Date when the document was last modified</li> <li><code>page_count</code>: Number of pages in the document</li> </ul> <p>Example:</p> <pre><code>from pdf_processor import extract_metadata\n\nmetadata = extract_metadata(\"path/to/document.pdf\")\nprint(f\"Document title: {metadata['title']}\")\nprint(f\"Author: {metadata['author']}\")\nprint(f\"Pages: {metadata['page_count']}\")\n</code></pre>"},{"location":"api-reference/pdf-processor/#process_pdffile_path-optionsnone","title":"<code>process_pdf(file_path, options=None)</code>","text":"<p>Processes a PDF document and returns both text content and metadata.</p> <p>Parameters:</p> <ul> <li><code>file_path</code> (str): Path to the PDF file</li> <li><code>options</code> (dict, optional): Configuration options for processing:</li> <li><code>extract_images</code> (bool): Whether to extract embedded images</li> <li><code>ocr</code> (bool): Whether to apply OCR on image-based content</li> <li><code>page_range</code> (tuple): Range of pages to process (e.g., <code>(1, 10)</code>)</li> </ul> <p>Returns:</p> <ul> <li><code>dict</code>: Dictionary containing:</li> <li><code>text</code>: Extracted text content</li> <li><code>metadata</code>: Document metadata</li> <li><code>pages</code>: List of page-specific content</li> </ul> <p>Example:</p> <pre><code>from pdf_processor import process_pdf\n\noptions = {\n    \"extract_images\": False,\n    \"ocr\": True,\n    \"page_range\": (1, 5)\n}\n\nresult = process_pdf(\"path/to/document.pdf\", options)\nprint(f\"Document text: {result['text'][:100]}...\")  # First 100 chars\nprint(f\"Total pages processed: {len(result['pages'])}\")\n</code></pre>"},{"location":"development/contributing/","title":"Contributing to DocAnalyze","text":"<p>This guide provides information for developers who want to contribute to the DocAnalyze project.</p>"},{"location":"development/contributing/#development-environment-setup","title":"Development Environment Setup","text":""},{"location":"development/contributing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.9 or higher</li> <li>Node.js 14 or higher</li> <li>Git</li> </ul>"},{"location":"development/contributing/#setting-up-the-development-environment","title":"Setting Up the Development Environment","text":"<ol> <li> <p>Clone the repository:    <pre><code>git clone https://github.com/yourusername/docanalyze.git\ncd docanalyze\n</code></pre></p> </li> <li> <p>Set up the Python environment:    <pre><code># Create a virtual environment\npython -m venv venv\n\n# Activate the virtual environment\n# On macOS/Linux:\nsource venv/bin/activate\n# On Windows:\nvenv\\Scripts\\activate\n\n# Install dependencies\npip install -r requirements.txt\n</code></pre></p> </li> <li> <p>Set up the JavaScript environment:    <pre><code>npm install\n</code></pre></p> </li> <li> <p>Configure environment variables:    Create a <code>.env</code> file in the project root with the following content:    <pre><code>GEMINI_API_KEY=your_gemini_api_key_here\nFLASK_ENV=development\nDEBUG=True\n</code></pre></p> </li> </ol>"},{"location":"development/contributing/#development-workflow","title":"Development Workflow","text":""},{"location":"development/contributing/#running-the-development-server","title":"Running the Development Server","text":"<ol> <li> <p>Start the Flask development server:    <pre><code>python app.py\n</code></pre>    The server will be accessible at http://localhost:5000</p> </li> <li> <p>For frontend development with hot reload:    <pre><code>npm run dev\n</code></pre></p> </li> </ol>"},{"location":"development/contributing/#code-style","title":"Code Style","text":"<p>This project follows: - PEP 8 style guide for Python code - Standard JS style for JavaScript code</p> <p>We use pre-commit hooks to enforce code style. Install them with: <pre><code>pre-commit install\n</code></pre></p>"},{"location":"development/contributing/#submitting-changes","title":"Submitting Changes","text":"<ol> <li> <p>Create a new branch for your feature or bugfix:    <pre><code>git checkout -b feature/your-feature-name\n</code></pre></p> </li> <li> <p>Make your changes and commit them with descriptive commit messages:    <pre><code>git commit -m \"Add feature: description of your changes\"\n</code></pre></p> </li> <li> <p>Push your changes to your fork:    <pre><code>git push origin feature/your-feature-name\n</code></pre></p> </li> <li> <p>Create a pull request against the main repository's <code>main</code> branch</p> </li> </ol>"},{"location":"development/contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<ul> <li>Ensure all tests pass</li> <li>Update documentation for any changed functionality</li> <li>Include tests for new features</li> <li>Follow the existing code style</li> <li>Keep pull requests focused on a single concern</li> </ul>"},{"location":"development/contributing/#project-structure","title":"Project Structure","text":"<pre><code>docanalyze/\n\u251c\u2500\u2500 app.py                  # Flask application entry point\n\u251c\u2500\u2500 pdf_processor.py        # PDF processing functionality\n\u251c\u2500\u2500 gemini_api_handler.py   # Gemini API integration\n\u251c\u2500\u2500 static/                 # Static assets\n\u2502   \u251c\u2500\u2500 css/                # CSS stylesheets\n\u2502   \u2514\u2500\u2500 js/                 # JavaScript files\n\u251c\u2500\u2500 templates/              # HTML templates\n\u251c\u2500\u2500 tests/                  # Test suite\n\u2502   \u251c\u2500\u2500 unit/               # Unit tests\n\u2502   \u2514\u2500\u2500 integration/        # Integration tests\n\u251c\u2500\u2500 docs/                   # Documentation\n\u2514\u2500\u2500 scripts/                # Utility scripts\n</code></pre>"},{"location":"development/testing/","title":"Testing Guide","text":"<p>This guide provides information about testing the DocAnalyze application.</p>"},{"location":"development/testing/#test-structure","title":"Test Structure","text":"<p>The DocAnalyze test suite is divided into several categories:</p> <ul> <li>Unit Tests: Test individual components in isolation</li> <li>Integration Tests: Test interactions between multiple components</li> <li>End-to-End Tests: Test complete application workflows</li> </ul>"},{"location":"development/testing/#running-tests","title":"Running Tests","text":""},{"location":"development/testing/#prerequisites","title":"Prerequisites","text":"<p>Ensure you have all development dependencies installed:</p> <pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"development/testing/#running-the-test-suite","title":"Running the Test Suite","text":"<p>To run the entire test suite:</p> <pre><code>pytest\n</code></pre>"},{"location":"development/testing/#running-specific-test-categories","title":"Running Specific Test Categories","text":"<p>To run only unit tests:</p> <pre><code>pytest tests/unit/\n</code></pre> <p>To run only integration tests:</p> <pre><code>pytest tests/integration/\n</code></pre>"},{"location":"development/testing/#test-coverage","title":"Test Coverage","text":"<p>To run tests with coverage reporting:</p> <pre><code>pytest --cov=. tests/\n</code></pre> <p>For a detailed HTML coverage report:</p> <pre><code>pytest --cov=. --cov-report=html tests/\n</code></pre> <p>The HTML report will be available in the <code>htmlcov</code> directory.</p>"},{"location":"development/testing/#writing-tests","title":"Writing Tests","text":""},{"location":"development/testing/#unit-test-example","title":"Unit Test Example","text":"<p>Here's an example of a unit test for the PDF processor:</p> <pre><code># tests/unit/test_pdf_processor.py\nimport pytest\nfrom pdf_processor import extract_text\n\ndef test_extract_text():\n    # Setup test data\n    test_file = \"tests/fixtures/sample.pdf\"\n\n    # Call the function\n    result = extract_text(test_file)\n\n    # Assert expectations\n    assert isinstance(result, str)\n    assert \"Expected sample text\" in result\n    assert len(result) &gt; 0\n</code></pre>"},{"location":"development/testing/#integration-test-example","title":"Integration Test Example","text":"<p>Here's an example of an integration test:</p> <pre><code># tests/integration/test_analysis_workflow.py\nimport pytest\nfrom pdf_processor import extract_text\nfrom gemini_api_handler import analyze_text\n\ndef test_document_analysis_workflow():\n    # Extract text from test document\n    test_file = \"tests/fixtures/sample.pdf\"\n    text = extract_text(test_file)\n\n    # Pass the extracted text to the Gemini API handler\n    analysis = analyze_text(text, analysis_type=\"summary\")\n\n    # Assert expectations\n    assert \"summary\" in analysis\n    assert len(analysis[\"summary\"]) &gt; 0\n</code></pre>"},{"location":"development/testing/#mock-testing","title":"Mock Testing","text":"<p>For tests that require API calls, we use mocks to avoid real API calls during testing:</p> <pre><code># tests/unit/test_gemini_api.py\nimport pytest\nfrom unittest.mock import patch\nfrom gemini_api_handler import analyze_text\n\n@patch(\"gemini_api_handler.google.generativeai.GenerativeModel\")\ndef test_analyze_text_with_mock(mock_generative_model):\n    # Set up the mock\n    mock_instance = mock_generative_model.return_value\n    mock_instance.generate_content.return_value.text = \"Mocked summary\"\n\n    # Call the function\n    result = analyze_text(\"This is some test content\", analysis_type=\"summary\")\n\n    # Assert expectations\n    assert result[\"summary\"] == \"Mocked summary\"\n    mock_instance.generate_content.assert_called_once()\n</code></pre>"},{"location":"development/testing/#test-fixtures","title":"Test Fixtures","text":"<p>We use pytest fixtures to set up test data and dependencies:</p> <pre><code># tests/conftest.py\nimport pytest\nimport tempfile\nimport os\n\n@pytest.fixture\ndef sample_pdf_file():\n    \"\"\"Fixture that provides a path to a sample PDF file.\"\"\"\n    # Return path to a test fixture file\n    return os.path.join(os.path.dirname(__file__), \"fixtures\", \"sample.pdf\")\n\n@pytest.fixture\ndef mock_gemini_api():\n    \"\"\"Fixture that mocks the Gemini API responses.\"\"\"\n    with patch(\"gemini_api_handler.google.generativeai.GenerativeModel\") as mock:\n        mock_instance = mock.return_value\n        mock_instance.generate_content.return_value.text = \"Mock response\"\n        yield mock_instance\n</code></pre>"},{"location":"user-guide/examples/","title":"Usage Examples","text":"<p>This page provides practical examples of how to use DocAnalyze for various document analysis tasks.</p>"},{"location":"user-guide/examples/#web-interface-examples","title":"Web Interface Examples","text":""},{"location":"user-guide/examples/#analyzing-a-research-paper","title":"Analyzing a Research Paper","text":"<ol> <li>Upload your research paper PDF through the web interface</li> <li>Select the \"Research Analysis\" template from the dropdown menu</li> <li>Click \"Process Document\"</li> <li>Review the generated summary, key findings, and citations</li> </ol>"},{"location":"user-guide/examples/#extracting-contract-information","title":"Extracting Contract Information","text":"<ol> <li>Upload your contract PDF</li> <li>Select the \"Contract Analysis\" template</li> <li>Click \"Process Document\"</li> <li>Review the parties involved, key dates, obligations, and terms highlighted in the analysis</li> </ol>"},{"location":"user-guide/examples/#analyzing-financial-reports","title":"Analyzing Financial Reports","text":"<ol> <li>Upload your financial report PDF</li> <li>Select the \"Financial Analysis\" template</li> <li>Click \"Process Document\"</li> <li>Review the key financial metrics, trends, and risk factors identified</li> </ol>"},{"location":"user-guide/examples/#api-usage-examples","title":"API Usage Examples","text":""},{"location":"user-guide/examples/#basic-document-upload-and-analysis","title":"Basic Document Upload and Analysis","text":"<pre><code>import requests\n\n# API endpoint\nurl = \"https://your-docanalyze-instance.com/api/analyze\"\n\n# Upload file and request analysis\nfiles = {\"document\": open(\"example.pdf\", \"rb\")}\ndata = {\"analysis_type\": \"standard\"}\n\nresponse = requests.post(url, files=files, data=data)\nresults = response.json()\n\n# Print analysis results\nprint(results[\"summary\"])\nprint(results[\"entities\"])\n</code></pre>"},{"location":"user-guide/examples/#custom-analysis-with-specific-questions","title":"Custom Analysis with Specific Questions","text":"<pre><code>import requests\n\n# API endpoint\nurl = \"https://your-docanalyze-instance.com/api/analyze\"\n\n# Upload file and request custom analysis\nfiles = {\"document\": open(\"report.pdf\", \"rb\")}\ndata = {\n    \"analysis_type\": \"custom\",\n    \"questions\": [\n        \"What is the main conclusion?\",\n        \"What methodology was used?\",\n        \"What are the key limitations mentioned?\"\n    ]\n}\n\nresponse = requests.post(url, files=files, data=data)\nresults = response.json()\n\n# Process the answers to your questions\nfor question, answer in zip(data[\"questions\"], results[\"answers\"]):\n    print(f\"Q: {question}\")\n    print(f\"A: {answer}\")\n    print()\n</code></pre>"},{"location":"user-guide/examples/#batch-processing-multiple-documents","title":"Batch Processing Multiple Documents","text":"<pre><code>import requests\nimport os\n\n# API endpoint\nurl = \"https://your-docanalyze-instance.com/api/batch\"\n\n# Prepare multiple files\nfiles = []\nfor filename in os.listdir(\"documents\"):\n    if filename.endswith(\".pdf\"):\n        files.append((\"documents\", open(f\"documents/{filename}\", \"rb\")))\n\n# Request batch analysis\ndata = {\"analysis_type\": \"standard\"}\nresponse = requests.post(url, files=files, data=data)\nbatch_id = response.json()[\"batch_id\"]\n\n# Check status and retrieve results when ready\nstatus_url = f\"https://your-docanalyze-instance.com/api/batch/{batch_id}\"\nstatus_response = requests.get(status_url)\nresults = status_response.json()\n\nprint(f\"Processed {len(results['documents'])} documents\")\n</code></pre>"},{"location":"user-guide/features/","title":"DocAnalyze Features","text":"<p>This page provides a comprehensive overview of the features available in DocAnalyze.</p>"},{"location":"user-guide/features/#pdf-processing-features","title":"PDF Processing Features","text":""},{"location":"user-guide/features/#text-extraction","title":"Text Extraction","text":"<p>DocAnalyze uses PyPDF to extract text content from PDF documents with high accuracy. The text extraction:</p> <ul> <li>Preserves document structure where possible</li> <li>Handles multi-column layouts</li> <li>Extracts text from tables and forms</li> <li>Works with scanned documents (when text is selectable)</li> </ul>"},{"location":"user-guide/features/#metadata-extraction","title":"Metadata Extraction","text":"<p>The application can extract the following metadata from PDF documents:</p> <ul> <li>Document title</li> <li>Author information</li> <li>Creation and modification dates</li> <li>Page count and dimensions</li> <li>Document encryption status</li> </ul>"},{"location":"user-guide/features/#ai-analysis-features","title":"AI Analysis Features","text":""},{"location":"user-guide/features/#content-summarization","title":"Content Summarization","text":"<p>Using Google's Gemini API, DocAnalyze can generate concise summaries of document content, highlighting:</p> <ul> <li>Key topics and themes</li> <li>Main arguments or points</li> <li>Important facts and figures</li> </ul>"},{"location":"user-guide/features/#named-entity-recognition","title":"Named Entity Recognition","text":"<p>Identify and categorize key entities in the document:</p> <ul> <li>People and organizations</li> <li>Locations</li> <li>Dates and time expressions</li> <li>Monetary values</li> <li>Percentages and quantities</li> </ul>"},{"location":"user-guide/features/#question-answering","title":"Question Answering","text":"<p>Ask specific questions about document content:</p> <ul> <li>\"What is the main conclusion of this report?\"</li> <li>\"When was the project completed?\"</li> <li>\"How much funding was allocated to Department X?\"</li> </ul>"},{"location":"user-guide/features/#web-interface-features","title":"Web Interface Features","text":"<ul> <li>Drag-and-drop document upload</li> <li>Interactive analysis results</li> <li>Document history and saved analyses</li> <li>Export results in multiple formats (JSON, CSV, PDF)</li> </ul>"},{"location":"user-guide/features/#api-features","title":"API Features","text":"<p>DocAnalyze provides a RESTful API for integration with other systems:</p> <ul> <li>Document upload endpoint</li> <li>Analysis request endpoints</li> <li>Results retrieval endpoints</li> <li>Batch processing capabilities</li> </ul>"},{"location":"user-guide/getting-started/","title":"Getting Started with DocAnalyze","text":"<p>This guide will help you install, configure, and start using DocAnalyze for your document analysis needs.</p>"},{"location":"user-guide/getting-started/#installation","title":"Installation","text":""},{"location":"user-guide/getting-started/#prerequisites","title":"Prerequisites","text":"<p>Before installing DocAnalyze, ensure you have the following:</p> <ul> <li>Python 3.9 or higher</li> <li>pip package manager</li> <li>Google Gemini API key</li> </ul>"},{"location":"user-guide/getting-started/#step-1-clone-the-repository","title":"Step 1: Clone the Repository","text":"<pre><code>git clone https://github.com/yourusername/docanalyze.git\ncd docanalyze\n</code></pre>"},{"location":"user-guide/getting-started/#step-2-install-dependencies","title":"Step 2: Install Dependencies","text":"<pre><code># For macOS/Linux:\n./scripts/setup.sh\n\n# For Windows:\nscripts\\setup.bat\n\n# Manual installation:\npip install -r requirements.txt\n</code></pre>"},{"location":"user-guide/getting-started/#step-3-configure-api-keys","title":"Step 3: Configure API Keys","text":"<p>Create a <code>.env</code> file in the project root directory with your API keys:</p> <pre><code>GEMINI_API_KEY=your_gemini_api_key_here\n</code></pre>"},{"location":"user-guide/getting-started/#running-the-application","title":"Running the Application","text":"<p>Start the application with:</p> <pre><code>python app.py\n</code></pre> <p>The application will be available at <code>http://localhost:5000</code>.</p>"},{"location":"user-guide/getting-started/#first-steps","title":"First Steps","text":"<ol> <li>Upload a Document: Navigate to the main page and upload a PDF document using the file selector.</li> <li>Process the Document: Click on \"Process Document\" to extract text and analyze content.</li> <li>Review Results: The application will display extracted text and analysis results.</li> </ol>"},{"location":"user-guide/getting-started/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about the different Features available in DocAnalyze</li> <li>See Usage Examples for common use cases</li> <li>Explore the API Reference for programmatic usage</li> </ul>"}]}